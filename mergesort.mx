fun merge(array, left, middle, right) {
    var i, j, k;
    var n1 = middle - left + 1;
    var n2 = right - middle;
 
    var tempLeft[n1], tempRight[n2];
 
    for (i = 0; i < n1; i++) {
        tempLeft[i] = array[left + i];
    }

    for (j = 0; j < n2; j++) {
        tempRight[j] = array[middle + 1 + j];
    }
 
    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (tempLeft[i] <= tempRight[j]) {
            array[k] = tempLeft[i];
            i++;
        } else {
            array[k] = tempRight[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        array[k] = tempLeft[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        array[k] = tempRight[j];
        j++;
        k++;
    }
}
 
fun mergeSort(array, left, right) {
    if (left < right) {
        var middle = left + (right - left) / 2;

        mergeSort(array, left, middle);
        mergeSort(array, middle + 1, right);
 
        merge(array, left, middle, right);
    }
}
 
fun main() {
    var array = [1, 2, 14, 7, 20, 12];
    var size = 6;
 
    mergeSort(array, 0, size - 1);
    print(array);

    return 0;
}